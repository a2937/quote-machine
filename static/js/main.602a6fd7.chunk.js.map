{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","quoteId","onClick","bind","this","fetchQuotes","json","cleanName","author","replace","cleanContent","content","document","getElementById","textContent","href","fetch","then","response","updateQuote","catch","err","console","log","className","id","title","icon","faTwitter","faTumblr","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sRAqFeA,E,kDA7Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAU,GAEZ,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBALH,E,sDASZC,KAAKC,gB,0CAILD,KAAKC,gB,kCAOKC,GACV,IAAIC,EAAYD,EAAKE,OAAOC,QAAQ,MAAO,OACvCC,EAAeJ,EAAKK,QAAQF,QAAQ,MAAO,OAE/CG,SAASC,eAAe,UAAUC,YAAcR,EAAKE,OACrDI,SAASC,eAAe,QAAQC,YAAcR,EAAKK,QACnDC,SAASC,eAAe,eAAeE,KAAO,6CAA+CR,EAAY,OAASG,EAClHE,SAASC,eAAe,gBAAgBE,KAAO,2EACnBR,EACxB,YAAcG,EAF6B,oC,oCAMlC,IAAD,OACZM,MAAM,kCAEHC,MAAK,SAAAC,GACJ,OAAOA,EAASZ,UAEjBW,MAAK,SAAAX,GACJ,OAAO,EAAKa,YAAYb,MAEzBc,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAOhB,OAEE,sBAAKG,UAAU,mBAAmBC,GAAG,YAArC,UAEE,mBAAGA,GAAG,OAAOD,UAAU,uBAEvB,mBAAGC,GAAG,SAASD,UAAU,gBAEzB,wBAAQC,GAAG,YAAYD,UAAU,cAActB,QAASE,KAAKF,QAA7D,6BAGA,uBACA,uBACA,mBAAGuB,GAAG,cAAcC,MAAM,mCAAmCX,KAAK,KAAlE,SACE,cAAC,IAAD,CAAiBY,KAAMC,IAAWJ,UAAU,+BAE9C,mBAAGC,GAAG,eAAeC,MAAM,4BAA4BX,KAAK,KAA5D,SAEE,cAAC,IAAD,CAAiBY,KAAME,IAAUL,UAAU,oC,GAvEnCM,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAASC,eAAe,SAM1BkB,M","file":"static/js/main.602a6fd7.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faTumblr } from '@fortawesome/free-brands-svg-icons'\nclass App extends Component {\n\n\n  constructor() {\n    super();\n    this.state = {\n      quoteId: -1\n    }\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    this.fetchQuotes();\n  }\n\n  componentDidMount() {\n    this.fetchQuotes();\n  }\n\n  /**\n   * Uses a quote object to set object properties\n   * @param {String} json\n   */\n  updateQuote(json) {\n    var cleanName = json.author.replace(/ +/g, \"%20\");\n    var cleanContent = json.content.replace(/ +/g, '%20');\n\n    document.getElementById('author').textContent = json.author;\n    document.getElementById('text').textContent = json.content;\n    document.getElementById('tweet-quote').href = \"https://www.twitter.com/intent/tweet?text=\" + cleanName + \":%0A\" + cleanContent;\n    document.getElementById('tumblr-quote').href = \"http://tumblr.com/widgets/share/tool?posttype=quote\" +\n      \"&tags=quotes&caption=\" + cleanName\n      + \"&content=\" + cleanContent + \"&canonicalUrl=\"\n      + \"quote-machine.com\";\n  }\n\n  fetchQuotes() {\n    fetch('https://api.quotable.io/random')\n      // Handle success\n      .then(response => {\n        return response.json();\n      })\n      .then(json => {\n        return this.updateQuote(json);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n\n\n  render() {\n    return (\n\n      <div className=\"center topOfPage\" id=\"quote-box\">\n\n        <p id=\"text\" className=\"twentyPoint italic\">\n        </p>\n        <p id=\"author\" className=\"twentyPoint\">\n        </p>\n        <button id=\"new-quote\" className=\"twentyPoint\" onClick={this.onClick}>\n          Get a new quote\n        </button>\n        <br />\n        <br />\n        <a id=\"tweet-quote\" title=\"Tweet this quote to your friends\" href=\"./\">\n          <FontAwesomeIcon icon={faTwitter} className=\"thirtyTwoPoint peachText\" />\n        </a>\n        <a id=\"tumblr-quote\" title=\"Post this quote on Tumblr\" href=\"./\">\n\n          <FontAwesomeIcon icon={faTumblr} className=\"thirtyTwoPoint redText\" />\n        </a>\n\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}